/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

import org.apache.tools.ant.taskdefs.condition.Os
import org.gradle.internal.jvm.Jvm

def config = project.hasProperty("react") ? project.react : [:];

def detectEntryFile(config) {
    if (System.getenv('ENTRY_FILE')) {
        return System.getenv('ENTRY_FILE')
    } else if (config.entryFile) {
        return config.entryFile
    } else if ((new File("${projectDir}/../../index.android.js")).exists()) {
        return "index.android.js"
    }

    return "index.js";
}

def composeSourceMapsPath = config.composeSourceMapsPath ?: "node_modules/react-native/scripts/compose-source-maps.js"
def bundleAssetName = config.bundleAssetName ?: "index.android.bundle"
def entryFile = detectEntryFile(config)
def bundleCommand = config.bundleCommand ?: "bundle"
def reactRoot = file(config.root ?: "../../")
def inputExcludes = config.inputExcludes ?: ["android/**", "ios/**"]
def bundleConfig = config.bundleConfig ? "${reactRoot}/${config.bundleConfig}" : null ;
def enableVmCleanup = config.enableVmCleanup == null ? true : config.enableVmCleanup
def hermesCommand = config.hermesCommand

/**
 * Detects CLI location in a similar fashion to the React Native CLI
 */
def detectCliPath(config, reactRoot) {
    // 1. preconfigured path
    if (config.cliPath) {
        def cliJsAbsolute = new File(config.cliPath)
        if (cliJsAbsolute.exists()) {
            return cliJsAbsolute.getAbsolutePath()
        }
        def cliJsRelativeToRoot = new File("${rootDir}/${config.cliPath}")
        if (cliJsRelativeToRoot.exists()) {
            return cliJsRelativeToRoot.getAbsolutePath()
        }
        def cliJsRelativeToProject = new File("${projectDir}/${config.cliPath}")
        if (cliJsRelativeToProject.exists()) {
            return cliJsRelativeToProject.getAbsolutePath()
        }
    }

    // 2. node module path
    def cliJsFromNode = new File(["node", "--print", "require.resolve('react-native/cli').bin"].execute(null, rootDir).text.trim())
    if (cliJsFromNode.exists()) {
        return cliJsFromNode.getAbsolutePath()
    }

    // 3. cli.js in the root folder
    def rootCliJs = new File(reactRoot, "node_modules/react-native/cli.js")
    if (rootCliJs.exists()) {
        return rootCliJs.getAbsolutePath()
    }

    throw new Exception("Couldn't determine CLI location. " +
             "Please set `project.ext.react.cliPath` to the path of the react-native cli.js file. " +
             "This file typically resides in `node_modules/react-native/cli.js`");
}

def reactNativeDevServerPort() {
    def value = project.getProperties().get("reactNativeDevServerPort")
    return value != null ? value : "8081"
}

def reactNativeInspectorProxyPort() {
    def value = project.getProperties().get("reactNativeInspectorProxyPort")
    return value != null ? value : reactNativeDevServerPort()
}

def getHermesOSBin() {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) return "win64-bin";
    if (Os.isFamily(Os.FAMILY_MAC)) return "osx-bin";
    if (Os.isOs(null, "linux", "amd64", null)) return "linux64-bin";
    throw new Exception("OS not recognized. Please set project.ext.react.hermesCommand " +
                        "to the path of a working Hermes compiler.");
}

// Make sure not to inspect the Hermes config unless we need it,
// to avoid breaking any JSC-only setups.
def getHermesCommand = {
    // 1. If the project specifies a Hermes command, don't second guess it.
    if (config.hermesCommand?.trim()) {
        if (hermesCommand.contains("%OS-BIN%")) {
            return hermesCommand
                .replaceAll("%OS-BIN%", getHermesOSBin())
                .replace('/' as char, File.separatorChar)
        } else {
            return hermesCommand
                .replace('/' as char, File.separatorChar)
        }
    }

    // 2. If the project is building hermes-engine from source, use hermesc from there
    // Also note that user can override the hermes source location with
    // the `REACT_NATIVE_OVERRIDE_HERMES_DIR` env variable.
    def hermesOverrideDir = System.getenv("REACT_NATIVE_OVERRIDE_HERMES_DIR")
    def builtHermesc = hermesOverrideDir ?
        new File(hermesOverrideDir, "build/bin/hermesc") :
        new File(reactRoot, "node_modules/react-native/ReactAndroid/hermes-engine/build/hermes/bin/hermesc")

    if (builtHermesc.exists()) {
        return builtHermesc.getAbsolutePath()
    }

    // 3. If the react-native contains a pre-built hermesc, use it.
    def prebuiltHermesPath = "node_modules/react-native/sdks/hermesc/%OS-BIN%/hermesc"
        .replaceAll("%OS-BIN%", getHermesOSBin())
        .replace('/' as char, File.separatorChar);
    def prebuiltHermes = new File(reactRoot, prebuiltHermesPath)
    if (prebuiltHermes.exists()) {
        return prebuiltHermes.getAbsolutePath()
    }

    throw new Exception("Couldn't determine Hermesc location. " +
        "Please set `project.ext.react.hermesCommand` to the path of the hermesc binary file. " +
        "node_modules/react-native/sdks/hermesc/%OS-BIN%/hermesc");
}

// Set enableHermesForVariant to a function to configure per variant,
// or set `enableHermes` to True/False to set all of them
def enableHermesForVariant = config.enableHermesForVariant ?: {
    def variant -> config.enableHermes ?: false
}

// Set hermesFlagsForVariant to a function to configure per variant,
// or set `hermesFlagsRelease` and `hermesFlagsDebug` to an array
def hermesFlagsForVariant = config.hermesFlagsForVariant ?: {
    def variant ->
        def hermesFlags;
        if (variant.name.toLowerCase().contains("release")) {
            // Can't use ?: since that will also substitute valid empty lists
            hermesFlags = config.hermesFlagsRelease
            if (hermesFlags == null) hermesFlags = ["-O", "-output-source-map"]
        } else {
            hermesFlags = config.hermesFlagsDebug
            if (hermesFlags == null) hermesFlags = []
        }
        return hermesFlags
}

// Set disableDevForVariant to a function to configure per variant,
// defaults to `devDisabledIn${targetName}` or True for Release variants and False for debug variants
def disableDevForVariant = config.disableDevForVariant ?: {
    def variant ->
      config."devDisabledIn${variant.name.capitalize()}" ||
      variant.name.toLowerCase().contains("release")
}

// Set bundleForVariant to a function to configure per variant,
// defaults to `bundleIn${targetName}` or True for Release variants and False for debug variants
def bundleForVariant = config.bundleForVariant ?: {
    def variant ->
      config."bundleIn${variant.name.capitalize()}" ||
      config."bundleIn${variant.buildType.name.capitalize()}" ||
      variant.name.toLowerCase().contains("release")
}

// Set deleteDebugFilesForVariant to a function to configure per variant,
// defaults to True for Release variants and False for debug variants
def deleteDebugFilesForVariant = config.deleteDebugFilesForVariant ?: {
    def variant -> variant.name.toLowerCase().contains("release")
}

android {
    buildTypes.all {
        resValue "integer", "react_native_dev_server_port", reactNativeDevServerPort()
        resValue "integer", "react_native_inspector_proxy_port", reactNativeInspectorProxyPort()
    }
}

def jvmVersion = Jvm.current().javaVersion.majorVersion
if (jvmVersion.toInteger() <= 8) {
    println "\n\n\n"
    println "**************************************************************************************************************"
    println "\n\n"
    println "ERROR: requires JDK11 or higher."
    println "Incompatible major version detected: '" + jvmVersion + "'"
    println "\n\n"
    println "**************************************************************************************************************"
    println "\n\n\n"
    System.exit(1)
}

